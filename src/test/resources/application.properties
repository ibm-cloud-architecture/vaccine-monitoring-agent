
quarkus.log.console.level=FINE
quarkus.log.console.enable=true

# Application specifics
temperature.threshold=-9.0
temperature.max.occurence.count=10


#### Config shared between all kafka connections
kafka.bootstrap.servers=kafka:9092

# when cold chain violation or anomaly are detected send message to reefer Topic

mp.messaging.outgoing.reefers.connector=smallrye-kafka
mp.messaging.outgoing.reefers.topic=${REEFER_TOPIC:vaccine-reefers}
mp.messaging.outgoing.reefers.group.id=reefer-monitoring-agent
mp.messaging.outgoing.reefers.key.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.outgoing.reefers.value.serializer=io.quarkus.kafka.client.serialization.JsonbSerializer


# Telemetries to process for reactive messaging
mp.messaging.incoming.telemetries.connector=smallrye-kafka
mp.messaging.incoming.telemetries.topic=${TELEMETRY_TOPIC:vaccine-reefer-telemetries}
mp.messaging.incoming.telemetries.group.id=cold-chain-agent
mp.messaging.incoming.telemetries.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.incoming.telemetries.value.deserializer=ibm.gse.eda.vaccine.coldchainagent.infrastructure.TelemetryDeserializer

hostname=localhost
quarkus.kafka-streams.application-server=${hostname}:8080
quarkus.kafka-streams.topics=${TELEMETRY_TOPIC:vaccine-reefer-telemetries}
quarkus.kafka-streams.application-id=cold-chain-agent
# Connection settings 
quarkus.kafka-streams.bootstrap-servers=kafka:9092
