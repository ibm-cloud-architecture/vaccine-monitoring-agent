
quarkus.log.console.format=%d{HH:mm:ss} %-5p [%c{2.}] (%t) %s%e%n
quarkus.log.console.level=FINE
quarkus.log.console.enable=true
quarkus.ssl.native=false
temperature.threshold=-9.0
temperature.max.occurence.count=5

anomalydetection.scoring/mp-rest/url=${ANOMALY_DETECTION_URL}
anomalydetection.scoring/mp-rest/scope=javax.inject.Singleton
anomalydetection.scoring.wmlToken=${WML_TOKEN}

# outgoing
# # to generate container data
# mp.messaging.outgoing.reefer-telemetry-out.connector=smallrye-kafka
# mp.messaging.outgoing.reefer-telemetry-out.topic=refarcTopic
# mp.messaging.outgoing.reefer-telemetry-out.group.id=cold-chain-agent-out
# mp.messaging.outgoing.reefer-telemetry-out.key.serializer=org.apache.kafka.common.serialization.StringSerializer
# mp.messaging.outgoing.reefer-telemetry-out.value.serializer=io.quarkus.kafka.client.serialization.JsonbSerializer

# # send message to different Topic

mp.messaging.outgoing.telmetryreefer.connector=smallrye-kafka
mp.messaging.outgoing.telmetryreefer.topic=reefers
mp.messaging.outgoing.telmetryreefer.group.id=telemetry-refer-channel-out
mp.messaging.outgoing.telmetryreefer.key.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.outgoing.telmetryreefer.value.serializer=io.quarkus.kafka.client.serialization.JsonbSerializer
mp.messaging.outgoing.telmetryreefer.bootstrap-servers=${KAFKA_BOOTSTRAP_SERVERS}
mp.messaging.outgoing.telmetryreefer.security.protocol=SASL_SSL
mp.messaging.outgoing.telmetryreefer.ssl.protocol=TLSv1.2
mp.messaging.outgoing.telmetryreefer.sasl.mechanism=PLAIN
mp.messaging.outgoing.telmetryreefer.sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username="token" password=${KAFKA_API_KEY};


# Configure the Kafka source (we read from it)
# to read data from topic `refarcTopic`
mp.messaging.incoming.reefer-telemetry.connector=smallrye-kafka
mp.messaging.incoming.reefer-telemetry.topic=refarcTopic
mp.messaging.incoming.reefer-telemetry.group.id=cold-chain-agent-in
mp.messaging.incoming.reefer-telemetry.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.incoming.reefer-telemetry.value.deserializer=ibm.gse.eda.vaccine.coldchainagent.infrastructure.TelemetryDeserializer
#  mp.messaging.incoming.reefer-telemetry.ssl.truststore.location=${CERT_LOCATION}
#### Config shared between all kafka connections
# bootstrap server is the only config needed for plain insercure local kafka instance
mp.messaging.connector.smallrye-kafka.bootstrap.servers=${KAFKA_BOOTSTRAP_SERVERS}

quarkus.kafka-streams.application-server=${POD_IP}:8080
# hostname=localhost
quarkus.kafka-streams.bootstrap-servers=${KAFKA_BOOTSTRAP_SERVERS}
quarkus.kafka-streams.topics=refarcTopic
quarkus.kafka-streams.application-id=stream-reader
quarkus.kafka-streams.security.protocol=SASL_SSL
quarkus.kafka-streams.ssl.protocol=TLSv1.2
quarkus.kafka-streams.sasl.mechanism=PLAIN
quarkus.kafka-streams.sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username="token" password=${KAFKA_API_KEY};