
quarkus.log.console.level=FINE
quarkus.log.console.enable=true
quarkus.log.category."ibm.gse.eda".level=${EDA_LOGGING_LEVEL:DEBUG}
quarkus.log.category."ibm.gse.eda".min-level=DEBUG
quarkus.ssl.native=false
quarkus.swagger-ui.always-include=true
# When deploying as openshift app using s2i for example
quarkus.openshift.expose=true
quarkus.openshift.labels.app=reefer-monitoring-agent
quarkus.container-image.registry=image-registry.openshift-image-registry.svc:5000
quarkus.container-image.name=reefer-monitoring-agent
quarkus.container-image.group=ibmcase

quarkus.openshift.env.configmaps=agent-cm
quarkus.openshift.env.secrets=agent-secrets
quarkus.openshift.env.fields.POD_IP=status.podIP
# server side TLS certificate
%prod.quarkus.openshift.env.vars.KAFKA_CERT_PATH=/deployments/certs/server/ca.p12
%prod.quarkus.openshift.env.mapping.KAFKA_CERT_PWD.from-secret=kafka-cluster-ca-cert
%prod.quarkus.openshift.env.mapping.KAFKA_CERT_PWD.with-key=ca.password
%prod.quarkus.openshift.mounts.es-cert.path=/deployments/certs/server
%prod.quarkus.openshift.secret-volumes.es-cert.secret-name=kafka-cluster-ca-cert
# TLS user
%prod.quarkus.openshift.env.mapping.USER_CERT_PWD.from-secret=tls
%prod.quarkus.openshift.env.mapping.USER_CERT_PWD.with-key=user.password
%prod.quarkus.openshift.env.vars.USER_CERT_PATH=/deployments/certs/user/user.p12
%prod.quarkus.openshift.mounts.user.path=/deployments/certs/user
%prod.quarkus.openshift.secret-volumes.user.secret-name=tls

# Application specifics
temperature.threshold=-9.0
temperature.max.occurence.count=10
prediction.enabled=false
cp4d.auth.url=${CP4D_AUTH_URL}
cp4d.user=${CP4D_USER}
cp4d.api_key=${CP4D_APIKEY}
anomalydetection.scoring.url=${ANOMALY_DETECTION_URL}
anomalydetection.scoring/mp-rest/url=${ANOMALY_DETECTION_URL}
anomalydetection.scoring/mp-rest/scope=javax.inject.Singleton

#### Config shared between all kafka connections
# TLS Properties
kafka.ssl.truststore.location=${KAFKA_CERT_PATH}
kafka.ssl.truststore.password=${KAFKA_CERT_PWD}
kafka.ssl.truststore.type=PKCS12
##########################
# Only one set of SCRAM or Mutual Auth properties are needed at a given time
# to perform user authentication.
##########################
# SCRAM Properties       #
##########################
%dev.quarkus.kafka-streams.security.protocol=SASL_SSL
%dev.quarkus.kafka-streams.sasl.mechanism=SCRAM-SHA-512
%dev.quarkus.kafka-streams.sasl.jaas.config=org.apache.kafka.common.security.scram.ScramLoginModule required username=${KAFKA_USER} password=${KAFKA_PASSWORD};
##########################
# OR #
##########################
# Mutual Auth Properties #
##########################
%prod.kafka.security.protocol=SSL
%prod.kafka.ssl.keystore.location=${USER_CERT_PATH}
%prod.kafka.ssl.keystore.password=${USER_CERT_PWD}
%prod.kafka.ssl.keystore.type=PKCS12
##########################

# when cold chain violation or anomaly are detected send message to reefer Topic

mp.messaging.outgoing.reefers.connector=smallrye-kafka
mp.messaging.outgoing.reefers.topic=${REEFER_TOPIC:vaccine-reefers}
mp.messaging.outgoing.reefers.key.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.outgoing.reefers.value.serializer=io.quarkus.kafka.client.serialization.JsonbSerializer


# Telemetries to process for reactive messaging
mp.messaging.incoming.telemetries.connector=smallrye-kafka
mp.messaging.incoming.telemetries.topic=${TELEMETRY_TOPIC:vaccine-reefer-telemetries}
mp.messaging.incoming.telemetries.group.id=reefer-monitoring-agent
mp.messaging.incoming.telemetries.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.incoming.telemetries.value.deserializer=ibm.gse.eda.vaccine.coldchainagent.infrastructure.TelemetryDeserializer


# hostname=localhost
quarkus.kafka-streams.application-server=${POD_IP}:8080
quarkus.kafka-streams.topics=${TELEMETRY_TOPIC:vaccine-reefer-telemetries}
quarkus.kafka-streams.application-id=cold-chain-agent
# Connection settings
quarkus.kafka-streams.bootstrap-servers=${KAFKA_BOOTSTRAP_SERVERS}
quarkus.kafka-streams.default.deserialization.exception.handler=org.apache.kafka.streams.errors.LogAndContinueExceptionHandler
# TLS Properties
quarkus.kafka-streams.ssl.protocol=TLSv1.2
quarkus.kafka-streams.ssl.truststore.location=${KAFKA_CERT_PATH}
quarkus.kafka-streams.ssl.truststore.password=${KAFKA_CERT_PWD}
quarkus.kafka-streams.ssl.truststore.type=PKCS12


##########################
# Only one set of SCRAM or Mutual Auth properties are needed at a given time
# to perform user authentication.
##########################
# SCRAM Properties       #
##########################
%dev.quarkus.kafka-streams.security.protocol=SASL_SSL
%dev.quarkus.kafka-streams.sasl.mechanism=${KAFKA_SASL_MECHANISM}
%dev.quarkus.kafka-streams.sasl.jaas.config=org.apache.kafka.common.security.scram.ScramLoginModule required username=${KAFKA_USER} password=${KAFKA_PASSWORD};
# OR #
##########################
# Mutual Auth Properties #
##########################
%prod.quarkus.kafka-streams.security.protocol=SSL
%prod.quarkus.kafka-streams.ssl.keystore.location=${USER_CERT_PATH}
%prod.quarkus.kafka-streams.ssl.keystore.password=${USER_CERT_PWD}
%prod.quarkus.kafka-streams.ssl.keystore.type=PKCS12
##########################
