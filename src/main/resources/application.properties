
quarkus.log.console.level=FINE
quarkus.log.console.enable=true
quarkus.ssl.native=false
quarkus.swagger-ui.always-include=true

# Application specifics
temperature.threshold=-9.0
temperature.max.occurence.count=10

anomalydetection.scoring/mp-rest/url=${ANOMALY_DETECTION_URL}
anomalydetection.scoring/mp-rest/scope=javax.inject.Singleton
anomalydetection.scoring.wmlToken=${WML_TOKEN}

#### Config shared between all kafka connections
kafka.bootstrap.servers=${KAFKA_BROKERS}
# TLS Properties
kafka.ssl.truststore.location=${KAFKA_CERT_PATH}
kafka.ssl.truststore.password=${KAFKA_CERT_PWD}
kafka.ssl.truststore.type=PKCS12
##########################
# Only one set of SCRAM or Mutual Auth properties are needed at a given time
# to perform user authentication.
##########################
# SCRAM Properties       #
##########################
#kafka.security.protocol=SASL_SSL
#kafka.ssl.protocol=TLSv1.2
#kafka.sasl.mechanism=SCRAM-SHA-512
#kafka.sasl.jaas.config=org.apache.kafka.common.security.scram.ScramLoginModule required username=${KAFKA_USER} password=${KAFKA_PASSWORD};
##########################
# OR #
##########################
# Mutual Auth Properties #
##########################
kafka.security.protocol=SSL
kafka.ssl.keystore.location=${USER_CERT_PATH}
kafka.ssl.keystore.password=${USER_CERT_PWD}
kafka.ssl.keystore.type=PKCS12
##########################

# when cold chain violation or anomaly are detected send message to reefer Topic

mp.messaging.outgoing.reefers.connector=smallrye-kafka
mp.messaging.outgoing.reefers.topic=${REEFER_TOPIC:vaccine-reefers}
mp.messaging.outgoing.reefers.group.id=reefer-monitoring-agent
mp.messaging.outgoing.reefers.key.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.outgoing.reefers.value.serializer=io.quarkus.kafka.client.serialization.JsonbSerializer


# Telemetries to process for reactive messaging
mp.messaging.incoming.telemetries.connector=smallrye-kafka
mp.messaging.incoming.telemetries.topic=${TELEMETRY_TOPIC:vaccine-reefer-telemetries}
mp.messaging.incoming.telemetries.group.id=reefer-monitoring-agent
mp.messaging.incoming.telemetries.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.incoming.telemetries.value.deserializer=ibm.gse.eda.vaccine.coldchainagent.infrastructure.TelemetryDeserializer


# hostname=localhost
quarkus.kafka-streams.application-server=${POD_IP}:8080
quarkus.kafka-streams.topics=${TELEMETRY_TOPIC:vaccine-reefer-telemetries}
quarkus.kafka-streams.application-id=cold-chain-agent
# Connection settings
quarkus.kafka-streams.bootstrap-servers=${KAFKA_BROKERS}
quarkus.kafka-streams.default.deserialization.exception.handler=org.apache.kafka.streams.errors.LogAndContinueExceptionHandler
# TLS Properties
quarkus.kafka-streams.ssl.protocol=TLSv1.2
quarkus.kafka-streams.ssl.truststore.location=${KAFKA_CERT_PATH}
quarkus.kafka-streams.ssl.truststore.password=${KAFKA_CERT_PWD}
quarkus.kafka-streams.ssl.truststore.type=PKCS12
##########################
# Only one set of SCRAM or Mutual Auth properties are needed at a given time
# to perform user authentication.
##########################
# SCRAM Properties       #
##########################
#quarkus.kafka-streams.security.protocol=SASL_SSL
#quarkus.kafka-streams.sasl.mechanism=SCRAM-SHA-512
#quarkus.kafka-streams.sasl.jaas.config=org.apache.kafka.common.security.scram.ScramLoginModule required username=${KAFKA_USER} password=${KAFKA_PASSWORD};
# OR #
##########################
# Mutual Auth Properties #
##########################
quarkus.kafka-streams.security.protocol=SSL
quarkus.kafka-streams.ssl.keystore.location=${USER_CERT_PATH}
quarkus.kafka-streams.ssl.keystore.password=${USER_CERT_PWD}
quarkus.kafka-streams.ssl.keystore.type=PKCS12
##########################
